GIT -> Version Control System maintains the changes in the code overtime which is hosted on a repository.
	We can see the history of who has made what changes and when.
	If a user has made any error and code is pushed then we can revert those changes.
	
	With version control 
		we can track
			history and multiple developers can work together.
			
	2 types of Version Control System.
	
		Centralised: The repository is placed at one place and delivers information to many clients. And any client 
		change will again be shared by other clients.
		
		 eg subverssion.
		 
			issue: if server goes offline, we cannot collaborate and save snapshots of the project.
			
		Distributed: Every user has a local copy of the repository. So user can save snapshots of the project locally on machine
				Even if the server is offline, users can sync the work among themselves.
				
				eg. GIT, Mercurial
		
				Why GIT:
					
					Free, Open Source and Super fast
					
		
		HOW TO USE GIT
			VIA command line
			VIA Code editors
			VIA GUI (sourcetree)
			
		
		We can make configuration changes on 3 level
		
			System: For all users
			Global: All repository of the current user
			Local: The current repository.
			
		How to initialize a repository
		
		git init
		
		Git Workflow
		
			1. git clone

			The very first step (not included on diagram) is to clone the repository to your local machine. Be sure to clone the project in a working directory that makes sense so you can easily remember where your local project lives.	

			2. git pull origin master

			Next, pull down from the remote repository (reminder, this lives on GitHub) to make sure you have up to date information. Believe it or not, changes could have been made by a team member in the time it took you to clone down the repository to your computer.

			3. git checkout -b new_branch_name

			Create your own branch! If you’re working in a group project like I was, you will probably want to create a new branch for the feature you are working on. Make sure you are titling your branch according to the standards of your workplace expectations. You now have your own little place to experiment with code without immediately affecting changes on the master branch!

			** note: you might not need to create a new branch if you are intentionally editing an existing branch. In that case, be sure you are on the correct branch and not the master prior to making any changes. Always check with your teammates before creating/editing branches.

			4. git add file_name 
			
					(git add file_name_1 file_name_2 ....) or (git add *.text), or (git add .)

			After your code has been tested and is complete, add your changes to the staging area. This means that your files are tracked by Git, changes are complete, and code is prepped, and ready to be added back to the repository.

			5. git status

			Run git status to confirm that your files have been added to the staging area. If the name of the file is listed in green - you're good to go! If not, try adding again.

					git commit -m "valuable_but_short_message_here"
					//git commit -a -m "Message_Here" 
					// git commit -am "Message_Here"
			Commit your changes back to the repository. Add a brief, but detailed comment about the changes that were made, code that was written, or bug that was fixed. Make it easy for your team members and future team members to understand what the alterations were.

			
			6. git push branch_name

			Next up - push your changes to the repository! You have now transferred your code up to GitHub. The code you've pushed up lives in the current branch you've worked on. We learned (the hard way) how important it is work on your branch and to push to your own branch. If you accidentally push up to the master you run the risk of overwriting code the master branch which lives within GitHub.
			
			
			Finally, you'll need to create a pull request through GitHub. This may vary depending on the nature of the project. Submitting a pull request will notify the owner of the repository that you are ready to merge your code with the master branch. It is up to the owner to review your code prior to finalizing the merge. In our particular situation we had team members look at the code together as we completed the pull request. Because we were still relatively new to the GitHub process, we wanted to be sure that no code was accidentally overwritten when a branch was merged with the master.
			
			
			7. git pull origin master
			
			This command was mentioned above as the first thing you should do after cloning to your machine. Again, you'll need to complete this once the master has been revised. This command gets a honorable mention for playing a critical role in keeping your working version up to date. After the master branch in a repository has been updated from a pull request, be sure to pull down from the repository into your local branches. This will ensure that you are working on the most up to date files moving forward.
		
		
		git ls-files shows the list of files in staging area
		
		git rm file_name_1.txt file_name_2.txt .. ..  // it will remove the listed files from local and staging repository
		
		or git rm *.txt
		
		if we rename the file,
		
		use cmd: git mv original_file_name new_file_name;
		
		Ignoring files: to untrack big files inside a project
			create a special file name called .gitignore
			
		if a directory in .gitignore file is still showing in the staging directory, then we can use
		
		git rm --cached -r __folder/__
		
		git status -s // for shorter version of git status command.
		
		git diff --staged // to see the latest changes in the staged environment.
		
		git log // to see the history
		
		git log -oneline // to show track in a single line
		
		git log --oneline --reverse // to show track in a single line and sort in ascending
		
		git show _commit-id_ // show the changes done to the file
		
		or git show HEAD~1  //SHOWS the first file change
		
		git restore --staged _file_name_1.js _file2.js_ ..	/or use *.fileextension or . // to unstage a file
		
		git restore __file-name__ or git restore . // to revert the changes to previous state
		
		in order to restore / remove the files which are never tracked by git use
		
		git clean -fd
		
		git restore --source=_commit-id_ // to restore the commit to previous state
		
		
		fork -> it makes a copy of the source project on your system, any changes we make will not impact the original source code.
		
		Scenario:
		
		If i have a project on my github and suddenly X saw it and wanted to add contribution. so they fork my repository and later comit their changes to X repository and finally create a pull request indicating thay heyy!! i have made some changes then later I can review and accept it,
		
		if we want to make the change from 1 branch to another, first we need to move to the destination branch.
		
		then write git merge source_branch_name
		
		
		GIT WORKFLOW:
			
			Centralised Workflow: Every developer contribute to only one working branch that is a master branch in central repository.
			developer clone central repository into local repository and in local repository they will edit the changes into the file.
			
			When more developer tries to make changes and push their changes to central repository, then there will be a chance of merge conflict
			
			
			GIT REBASE: Rebase will merge the existing local code with the cenral workflow file code.
			
			This file will show both the changes that were done from other developer and me.
			
			git pull --rebase origin master
			
			after modifying the file we can push the latest code by
			
			git rebase --continue and later do git push origin master
			
			in case of merge conflict:

			use -> git pull --rebase origin master

			and after making changes to file

			use -> git rebase --continue

			and git push origin master
			
			Feature Branch Workflow: In this we will have dedicated branches for each feature. This will not disturb the master branch unlike we saw in centralized workflow.
			
			Gitflow:
			
			
=====================================================================================================================

Chirag Git cheetsheet

Git commands and flow

git status (for checking the status)
Step 1: Save changes at local 
git stash

Step 2: get updated code on local from master branch
git pull --rebase upstream master

Step 3: Update our own branch by pushing updated local code on that
git push origin <your branch name>

Step 4: add changes you had made to the code at local now and sort out the conflict if any
git stash apply 

Step 5: add all untracked file 
git add .

Step 6: Commit your code 
git commit -m “commit message”


Step 7: Push your code to your branch 
git push origin <Your branch name>

Raise pull request after that and send that url to dev group

Important commands

Creating and switching in new branch
git checkout -b ＜new-branch＞

Deleting branch
git branch -d <branch> 

In order to amend commit:
git commit --amend -m "New commit message."

For excluding files while adding in git
git add --all -- ':!path/to/file1' ':!path/to/file2' ':!path/to/folder1/*'

To clear all stash
git stash clear

In order to revert changes in particular file
 git checkout -- <file name>

For cherry-pick commit to your branch 
git cherry-pick <commit_id>

For Squash commit
git rebase -i HEAD~5



Git Stash

The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy.

	git stash save "message" -> changes in file that you want to stash

	git stash list -> shows the list of stash we created
	
	git stash pop -> to remove the 1st entry from stash and make changes to the file.
	
	git stash apply stash@0 {stash name} -> apply the stash changes to your file but keeps the stash record and 	
											dont delete the stash entry.
											
	git stash clear -> removes all the stash data.
	
	
	
	